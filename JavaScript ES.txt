Funções de primeira classe => função pode ser atribuida, ser passada de parâmetro, pode ser retornada por outra função

Currying -> pode armazenar a função com seu parâmetro e reutiliza-la sem precisar passar o paramêtro de novo

Hoisting -> elevar uma criação de variável no escopo, ou uma função inteira de modo a garantir que a variável/função exista antes de sua utilização

Imutabilidade -> objetos instanciados não podem ser modificados, um novo objeto deve ser criado

Tipos e variáveis

var -> não respeita escopo de bloco, é sempre global ou de função

let -> respeita o escopo de bloco, fora isso declara uma variável assim como var

const -> declara uma constante, respeita o escopo de bloco assim como o let
constante de tipo primitivo não pode ter o valor alterado
constante de objeto, pode alterar os atributos, porém não pode atribuir um novo objeto
constante de array, pode incluir, remover e alterar elementos diretamente, mas não pode atribuir uma nova array

O JavaScript teve dois nomes anteriores: Mocha e Livescript.
Foi lançado junto com a versão beta do Netscape 2.0

Orientação a objetos
--------------------
Todo objeto tem um protótipo e é instanciado por um constructor

objeto.__proto__ => traz o protótipo do objeto
objeto.__proto__.constructor = retirna o construtor do objeto

var texto = "João"

texto.__proto__
String {"", constructor: ƒ, anchor: ƒ, big: ƒ, blink: ƒ, …}anchor: ƒ anchor()big: ƒ big()blink: ƒ blink()bold: ƒ bold()charAt: ƒ charAt()charCodeAt: ƒ charCodeAt()codePointAt: ƒ codePointAt()concat: ƒ concat()constructor: ƒ String()arguments: (...)caller: (...)fromCharCode: ƒ fromCharCode()fromCodePoint: ƒ fromCodePoint()length: 1name: "String"prototype: Stringanchor: ƒ anchor()big: ƒ big()blink: ƒ blink()bold: ƒ bold()charAt: ƒ charAt()charCodeAt: ƒ charCodeAt()codePointAt: ƒ codePointAt()concat: ƒ concat()constructor: ƒ String()arguments: (...)caller: (...)fromCharCode: ƒ fromCharCode()fromCodePoint: ƒ fromCodePoint()length: 1name: "String"prototype: String {"", constructor: ƒ, anchor: ƒ, big: ƒ, blink: ƒ, …}raw: ƒ raw()__proto__: ƒ ()[[Scopes]]: Scopes[0]endsWith: ƒ endsWith()fixed: ƒ fixed()fontcolor: ƒ fontcolor()fontsize: ƒ fontsize()includes: ƒ includes()indexOf: ƒ indexOf()italics: ƒ italics()lastIndexOf: ƒ lastIndexOf()length: 0link: ƒ link()localeCompare: ƒ localeCompare()match: ƒ match()matchAll: ƒ matchAll()normalize: ƒ normalize()padEnd: ƒ padEnd()padStart: ƒ padStart()repeat: ƒ repeat()replace: ƒ replace()replaceAll: ƒ replaceAll()search: ƒ search()slice: ƒ slice()small: ƒ small()split: ƒ split()startsWith: ƒ startsWith()strike: ƒ strike()sub: ƒ sub()substr: ƒ substr()substring: ƒ substring()sup: ƒ sup()toLocaleLowerCase: ƒ toLocaleLowerCase()toLocaleUpperCase: ƒ toLocaleUpperCase()toLowerCase: ƒ toLowerCase()toString: ƒ toString()toUpperCase: ƒ toUpperCase()trim: ƒ trim()trimEnd: ƒ trimEnd()trimLeft: ƒ trimStart()trimRight: ƒ trimEnd()trimStart: ƒ trimStart()valueOf: ƒ valueOf()Symbol(Symbol.iterator): ƒ [Symbol.iterator]()__proto__: Object[[PrimitiveValue]]: ""raw: ƒ raw()__proto__: ƒ ()[[Scopes]]: Scopes[0]endsWith: ƒ endsWith()fixed: ƒ fixed()fontcolor: ƒ fontcolor()fontsize: ƒ fontsize()includes: ƒ includes()indexOf: ƒ indexOf()italics: ƒ italics()lastIndexOf: ƒ lastIndexOf()length: 0link: ƒ link()localeCompare: ƒ localeCompare()match: ƒ match()matchAll: ƒ matchAll()normalize: ƒ normalize()padEnd: ƒ padEnd()padStart: ƒ padStart()repeat: ƒ repeat()replace: ƒ replace()replaceAll: ƒ replaceAll()search: ƒ search()slice: ƒ slice()small: ƒ small()split: ƒ split()startsWith: ƒ startsWith()strike: ƒ strike()sub: ƒ sub()substr: ƒ substr()substring: ƒ substring()sup: ƒ sup()toLocaleLowerCase: ƒ toLocaleLowerCase()toLocaleUpperCase: ƒ toLocaleUpperCase()toLowerCase: ƒ toLowerCase()toString: ƒ toString()toUpperCase: ƒ toUpperCase()trim: ƒ trim()trimEnd: ƒ trimEnd()trimLeft: ƒ trimStart()trimRight: ƒ trimEnd()trimStart: ƒ trimStart()valueOf: ƒ valueOf()Symbol(Symbol.iterator): ƒ [Symbol.iterator]()__proto__: Object[[PrimitiveValue]]: ""

texto.__proto__.constructor
ƒ String() { [native code] }

texto.__proto__.constructor === String
true

o operador instanceof permite verificar qual é o tipo da variável

var texto2 = new String("João")

texto2 instanceof String
true

